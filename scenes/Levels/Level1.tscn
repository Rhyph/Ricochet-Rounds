[gd_scene load_steps=22 format=2]

[ext_resource path="res://sounds/Powerup20.wav" type="AudioStream" id=1]
[ext_resource path="res://scenes/Player.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/return.tscn" type="PackedScene" id=3]
[ext_resource path="res://scriptes/Sky.gd" type="Script" id=4]
[ext_resource path="res://scenes/UI & util/UI.tscn" type="PackedScene" id=5]
[ext_resource path="res://scenes/Platforms/WallMini.tscn" type="PackedScene" id=6]
[ext_resource path="res://scenes/Platforms/Wall.tscn" type="PackedScene" id=7]
[ext_resource path="res://scenes/Platforms/Wall45deg.tscn" type="PackedScene" id=8]
[ext_resource path="res://scenes/Platforms/redWall.tscn" type="PackedScene" id=9]
[ext_resource path="res://scriptes/Levels.gd" type="Script" id=10]
[ext_resource path="res://sprites/coin.png" type="Texture" id=11]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform int octaves = 5;
uniform vec2 viewport_size = vec2(280.0, 180.0);
uniform float x_offset = 0.;
uniform float y_offset = 0.;

varying vec2 vtx;

vec3 mod289(vec3 x)
{
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289_2(vec2 x) 
{
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) 
{
	return mod289(((x*34.0)+1.0)*x);
}

// Simplex noise 
// https://github.com/ashima/webgl-noise 
// Copyright (C) 2011 Ashima Arts. All rights reserved.
float snoise(vec2 v)
{
	const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
	                    0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
	                    -0.577350269189626,  // -1.0 + 2.0 * C.x
	                    0.024390243902439); // 1.0 / 41.0
// First corner
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
	vec2 i1;
	//i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
	//i1.y = 1.0 - i1.x;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	// x0 = x0 - 0.0 + 0.0 * C.xx ;
	// x1 = x0 - i1 + 1.0 * C.xx ;
	// x2 = x0 - 1.0 + 2.0 * C.xx ;
	vec4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;

// Permutations
	i = mod289_2(i); // Avoid truncation effects in permutation
	vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

	vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
	m = m*m ;
	m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
	
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	
	// Normalise gradients implicitly by scaling m
	// Approximation of: m *= inversesqrt( a0*a0 + h*h );
	m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
	
	// Compute final noise value at P
	vec3 g;
	g.x  = a0.x  * x0.x  + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);
}

vec2 rand2(vec2 p)
{
	p = vec2(dot(p, vec2(12.9898,78.233)), dot(p, vec2(26.65125, 83.054543))); 
	return fract(sin(p) * 43758.5453);
}

float rand(vec2 p)
{
	return fract(sin(dot(p.xy ,vec2(54.90898,18.233))) * 4337.5453);
}

vec3 hsv2rgb(vec3 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

// Thanks to David Hoskins https://www.shadertoy.com/view/4djGRh
float stars(in vec2 x, float numCells, float size, float br)
{
	vec2 n = x * numCells;
	vec2 f = floor(n);

	float d = 1.0e10;
	for (int i = -1; i <= 1; ++i)
	{
		for (int j = -1; j <= 1; ++j)
		{
			vec2 g = f + vec2(float(i), float(j));
			g = n - g - rand2(mod(g, numCells)) + rand(g);
			// Control size
			g *= 1. / (numCells * size);
			d = min(d, dot(g, g));
		}
	}

	return br * (smoothstep(.95, 1., (1. - sqrt(d))));
}

// Simple fractal noise
// persistence - A multiplier that determines how quickly the amplitudes diminish for 
// each successive octave.
// lacunarity - A multiplier that determines how quickly the frequency increases for 
// each successive octave.
float fractalNoise(in vec2 coord, in float persistence, in float lacunarity)
{    
	float n = 0.;
	float frequency = 1.;
	float amplitude = 1.;
	for (int o = 0; o < octaves; ++o)
	{
	    n += amplitude * snoise(coord * frequency);
	    amplitude *= persistence;
	    frequency *= lacunarity;
	}
	return n;
}

vec3 fractalNebula(in vec2 coord, vec3 color, float transparency)
{
	float n = fractalNoise(coord, .5, 2.);
	return n * color * transparency;
}

vec4 mainImage(vec2 fragCoord)
{
	float resolution = max(viewport_size.x, viewport_size.y);
	
	vec2 coord = fragCoord.xy / resolution;
	
	vec3 result = vec3(0.);
	vec3 nebulaColor1 = hsv2rgb(vec3(.5, 0.5, .25));
	vec3 nebulaColor2 = hsv2rgb(vec3(.7, 1., .25));

	result += fractalNebula(coord + vec2(.1, .1), nebulaColor1, 1.);
	result += fractalNebula(coord + vec2(0., .2), nebulaColor2, .5);
	result += stars(coord, 4., 0.06, 0.6) * vec3(.9, .9, .95);
	
	return vec4(result, 1.);
}

void vertex()
{
	vtx = VERTEX + vec2(x_offset, y_offset);
}

void fragment()
{
	COLOR = mainImage(vtx);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/octaves = 5
shader_param/viewport_size = Vector2( 320, 180 )
shader_param/x_offset = 0.0
shader_param/y_offset = 0.0

[sub_resource type="GDScript" id=4]
script/source = "extends Area2D


var ghost = false
var once = true
var once2 = true


func _ready():
	if G.coins >= 1:
		ghost = true
		$coin.modulate = Color(0, 1, 1, 0.75)

func _on_Coin_body_entered(_body):
	$\"/root/World/CanvasLayerReturn\".disable()
	G.curLevel = 1
	G.coinPicked = true
	if once:
		once = false
		$AudioStreamPlayer.play()
		$AnimationPlayer.play(\"break\")
		if !ghost:
			G.coins += 1
			FS.save_data(G.coins)
	
	if once2:
		once2 = false
		$\"/root/World/Timer2\".start()

func _on_Timer2_timeout():
	G.coinPicked = false
	$\"/root/World/UI\".endLevelMenu()
"

[sub_resource type="CircleShape2D" id=5]
radius = 4.0

[sub_resource type="Animation" id=6]
resource_name = "break"
length = 0.3
step = 0.01
tracks/0/type = "method"
tracks/0/path = NodePath(".")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0.3 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "queue_free"
} ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("coin:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 0.5, 2 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, -4 ), Vector2( 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("CollisionShape2D:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 0.5, 2 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, -4 ), Vector2( 0, 0 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("coin:self_modulate")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Gradient" id=9]
offsets = PoolRealArray( 0, 0.538259, 1 )
colors = PoolColorArray( 0, 0, 0, 1, 0.372549, 0.803922, 0.894118, 1, 0, 0, 0, 0 )

[sub_resource type="GradientTexture" id=10]
gradient = SubResource( 9 )

[sub_resource type="Curve" id=12]
_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 0 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=13]
curve = SubResource( 12 )

[sub_resource type="ParticlesMaterial" id=11]
emission_shape = 1
emission_sphere_radius = 6.0
flag_disable_z = true
gravity = Vector3( 0, 98, 0 )
angular_velocity = 360.0
angular_velocity_random = 1.0
orbit_velocity = 0.0
orbit_velocity_random = 0.0
linear_accel = -50.0
linear_accel_random = 1.0
scale = 2.0
scale_random = 1.0
scale_curve = SubResource( 13 )
color = Color( 0.372549, 0.803922, 0.894118, 1 )
color_ramp = SubResource( 10 )

[node name="World" type="Node2D"]
script = ExtResource( 10 )

[node name="Player" parent="." instance=ExtResource( 2 )]
position = Vector2( 144, 112 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="Sky" type="ColorRect" parent="ParallaxBackground"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 4 )
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="UI" parent="." instance=ExtResource( 5 )]

[node name="Platformes" type="Node2D" parent="."]

[node name="Wall" parent="Platformes" instance=ExtResource( 7 )]
position = Vector2( 134, 59 )
rotation = 1.5708

[node name="Wall3" parent="Platformes" instance=ExtResource( 7 )]
position = Vector2( 110, 43 )
rotation = 1.5708

[node name="Wall5" parent="Platformes" instance=ExtResource( 7 )]
position = Vector2( 132, 25 )

[node name="Wall6" parent="Platformes" instance=ExtResource( 7 )]
position = Vector2( 164, 25 )

[node name="Wall4" parent="Platformes" instance=ExtResource( 7 )]
position = Vector2( 110, 75 )
rotation = 1.5708

[node name="Wall2" parent="Platformes" instance=ExtResource( 7 )]
position = Vector2( 186, 51 )
rotation = 1.5708

[node name="Wall45deg" parent="Platformes" instance=ExtResource( 8 )]
position = Vector2( 136, 59 )
rotation = 3.14159

[node name="Wall45deg4" parent="Platformes" instance=ExtResource( 8 )]
position = Vector2( 112, 27 )
rotation = 3.14159

[node name="Wall45deg2" parent="Platformes" instance=ExtResource( 8 )]
position = Vector2( 184, 75 )

[node name="Wall45deg3" parent="Platformes" instance=ExtResource( 8 )]
position = Vector2( 184, 27 )
rotation = 4.71239

[node name="redWall" parent="Platformes" instance=ExtResource( 9 )]
position = Vector2( 176, 93 )

[node name="redWall2" parent="Platformes" instance=ExtResource( 9 )]
position = Vector2( 208, 93 )

[node name="Wall45deg5" parent="Platformes" instance=ExtResource( 8 )]
position = Vector2( 112, 91 )
rotation = 1.5708

[node name="WallMini" parent="Platformes" instance=ExtResource( 6 )]
position = Vector2( 120, 93 )

[node name="Coin1" type="Area2D" parent="."]
position = Vector2( 224, 85 )
z_index = 1
collision_layer = 0
collision_mask = 2
script = SubResource( 4 )
__meta__ = {
"_edit_group_": true
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="Coin1"]
shape = SubResource( 5 )

[node name="coin" type="Sprite" parent="Coin1"]
texture = ExtResource( 11 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Coin1"]
anims/break = SubResource( 6 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="Coin1"]
stream = ExtResource( 1 )
volume_db = -15.0
bus = "FX"

[node name="Particles2D" type="Particles2D" parent="Coin1"]
rotation = 3.14159
lifetime = 0.9
process_material = SubResource( 11 )
__meta__ = {
"_editor_description_": ""
}

[node name="Timer" type="CanvasLayer" parent="."]

[node name="Label" type="Label" parent="Timer"]
margin_left = 280.0
margin_top = 166.0
margin_right = 318.0
margin_bottom = 179.0
text = "Level 1"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CanvasLayerReturn" parent="." instance=ExtResource( 3 )]

[node name="Timer2" type="Timer" parent="."]
wait_time = 0.3
one_shot = true

[connection signal="body_entered" from="Coin1" to="Coin1" method="_on_Coin_body_entered"]
[connection signal="timeout" from="Timer2" to="Coin1" method="_on_Timer2_timeout"]
